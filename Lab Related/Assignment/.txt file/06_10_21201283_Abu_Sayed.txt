

    #1(a)
    def fact(n):
      if n==0 or n==1:
        return 1
      else:
        return n*fact(n-1)
    n=int(input())    
    fact(n)    

    3

    6

    #1(b)
    def fibo(n):
      if n==1:
        return 0
      elif n==2:
        return 1
      else:
        return fibo(n-1)+fibo(n-2)
    n=int(input())    
    fibo(n)      

    4

    2

    #1(c)
    def printarray(a):
        


        if len(a)==1:
            return print(a[0],end='')
        else:
            print(a[0],end=' ')
            printarray(a[1:])


    printarray([1,2,3,4,5])        

    1 2 3 4 5

    #1(d)
    def basepower(m,n):
      if n==0:
        return 1
      else:
        return m*basepower(m,n-1)


    n1=int(input())
    n2=int(input())
    basepower(n1,n2)   
    #2(a)
    def dec_to_bin(n):
        if n==0:
            return
        else:
            dec_to_bin(int(n/2))
            print(n%2,end="")
    n=int(input())    
    dec_to_bin(n)

    5
    7
    4
    100

    #2(b)
    class Node:
      def __init__(self, e, n):
        self.element = e
        self.next = n
    class LinkedList:
      
      def __init__(self, a):
      


        self.head=None
        tail=None


        if type(a)==list:




          for i in a:




            newNode=Node(i,None)
            if self.head==None:


              self.head=newNode
              tail=newNode
            else:
              tail.next=newNode
              tail=newNode 
        else:
           self.head=a    
         
    def llist(head):


      if head==None:
        return 0
      else:  
        return head.element+llist(head.next)


    ll=LinkedList([1,2,3,4,5])
    llist(ll.head)

    15

    #2(c)
    class Node:
      def __init__(self, e, n):
        self.element = e
        self.next = n
    class LinkedList:
      
      def __init__(self, a):
      


        self.head=None
        tail=None


        if type(a)==list:




          for i in a:




            newNode=Node(i,None)
            if self.head==None:


              self.head=newNode
              tail=newNode
            else:
              tail.next=newNode
              tail=newNode 
        else:
           self.head=a    
         
    def llist(head):
      if head==None:
        return 0
      else:
         llist(head.next)
         print(head.element)
         


      


    ll=LinkedList([1,2,3,4,5])
    llist(ll.head)

    5
    4
    3
    2
    1

    #3
    def house_of_cards(height):
        if height == 0:
            return "\ndo not build a house at all."
        elif height == 1:
            return 8
        else:
            return 5+house_of_cards(height-1)






    height = int(input(" height: "))
    house_of_cards(height)

     height: 20

    103

    #4(a)
    def pattern(x):
        if x == 0:
            return 0
        else:
            pattern(x-1)
            print(x, end=" ")




    def triangle_print(x):
        if x == 0:
            return 0
        else:
            triangle_print(x-1)
        pattern(x)
        print()




    x = int(input("Enter x: "))


    triangle_print(x)

    Enter x: 2
    1 
    1 2 

    #4b
    def pattern(x):
        if x == 0:
            return 0
        else:
            pattern(x-1)
            print(x, end="")




    def  triangle_print(x, n):
        if x == 0:
            return 0
        else:
            space(x-1)
            pattern((n)-x+1)
            print()
            triangle_print(x-1, n)




    def space(x):
        if x == 0:
            return 0
        else:
            space(x - 1)
            print("", end=" ")
    x=int(input())


                   
    triangle_print(x, x)

    2
     1
    12

    #5
    class FinalQ:
        def print(self, array, idx):
            if(idx < len(array)):
                profit = self.calcProfit(array[idx])
                print(f"{str(idx+1)}. Investment: {array[idx]}; Profit: {profit} ")
                self.print(array, idx+1)


        def calcProfit(self, investment):
            if investment <= 25000:
                return 0.0
            elif investment > 25000 and investment <= 100000:
                return 45 + self.calcProfit(investment-1000)
            elif investment > 100000:
                return 80 + self.calcProfit(investment-1000)
            else:
                return 0




    array = [25000, 100000, 250000, 350000]
    f = FinalQ()
    f.print(array, 0)

    1. Investment: 25000; Profit: 0.0 
    2. Investment: 100000; Profit: 3375.0 
    3. Investment: 250000; Profit: 15375.0 
    4. Investment: 350000; Profit: 23375.0 
