

    class Node:
      def __init__(self, e, n, p):
        self.element = e
        self.next = n
        self.prev = p

    class DoublyList:
      
      def __init__(self, a):
      # Creates a Non Dummy Headed Circular Doubly Linked List using the values from the given array a.
       if type(a)==list:

          self.head =Node(None,None,None)
          tail=self.head
          self.head.prev=self.head
          tail.next=self.head
          for i in a:
            n=Node(i,None,None)
            tail.next=n
            n.prev=tail
            self.head.prev=n
            n.next=self.head
            tail=n
              

      
      # Counts the number of Nodes in the list and return the number
      def countNode(self):
        c=0
        m=self.head.next
        while(m!=self.head):
          c=c+1
          m=m.next
        return c
      
      # prints the elements in the list
      def forwardprint(self):
        n=self.head.next
        while(n!=self.head):
          if n==self.head.prev:
            print(n.element,end=".")
          else:
            print(n.element,end=",")

          n=n.next
        print( )

      # prints the elements in the list backward
      def backwardprint(self):
        n=self.head.prev
        while(n!=self.head):
          if n==self.head.next:
            print(n.element,end='.')
          else:
            print(n.element,end=',')
          n=n.prev
        print( )

      # returns the reference of the at the given index. For invalid index return None.
      def nodeAt(self, idx):
        if idx < 0 or idx>= self.countNode():
          return None
         
        else:
          n = self.head.next

          i = 0
          while i < idx:
            n = n.next
            i = i + 1
          return n

      
      # returns the index of the containing the given element. if the element does not exist in the List, return -1.

      def indexOf(self, elem):
       a=self.head.next
       c=0  
       while(a!=self.head):  
            if  a.element==elem:
              return c
            else:
              c=c+1
              a=a.next
       return -1 

      # inserts containing the given element at the given index Check validity of index. 
      def insert(self, elem, idx):
        a=self.head.next  
        newNode=Node(elem,None,None)
        if idx>=0 and idx<=self.countNode():
          if idx==0:
            newNode.next=a
            a.prev=newNode
            newNode.prev=self.head
            self.head.next=newNode

          elif idx==self.countNode:
            prevNode=self.nodeAt(idx-1)
            prevNode.next=newNode
            newNode.prev=prevNode
            newNode.next=self.head
            self.head.prev=newNode

          else:
            prevNode=self.nodeAt(idx-1)
            postNode=prevNode.next
            prevNode.next=newNode
            newNode.next=postNode
            newNode.prev=prevNode
            postNode.prev=newNode

      # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
      def remove(self, idx):
         p=self.head.next
         if idx<0 and idx>=self.countNode():
           return None
         else:
           if idx==0:
             removed=p
             self.head.next=p.next
             p.next.prev=self.head
           
           else:
             prevnode=self.nodeAt(idx-1)
             removed=prevnode.next
             prevnode.next=removed.next
             removed.next.prev=prevnode
           x=removed.element
           removed.element=None 
           removed.next=None
           removed.prev=None
           return str(x)   

    print("///  Test 01  ///")
    a1 = [10, 20, 30, 40]
    h1 = DoublyList(a1) # Creates a linked list using the values from the array

    h1.forwardprint() # This should print: 10,20,30,40. 
    h1.backwardprint() # This should print: 40,30,20,10. 
    print(h1.countNode()) # This should print: 4

    print("///  Test 02  ///")
    # returns the reference of the at the given index. For invalid idx return None.
    myNode = h1.nodeAt(2)
    print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

    print("///  Test 03  ///")
    # returns the index of the containing the given element. if the element does not exist in the List, return -1.
    index = h1.indexOf(40)
    print(index) # This should print: 3. In case of element that 
    #doesn't exists in the list this will print -1.

    print("///  Test 04  ///")

    a2 = [10, 20, 30, 40]
    h2 = DoublyList(a2) # uses the  constructor
    h2.forwardprint() # This should print: 10,20,30,40.  

    # inserts containing the given element at the given index. Check validity of index.
    h2.insert(85,0)
    h2.forwardprint() # This should print: 85,10,20,30,40. 
    h2.backwardprint() # This should print: 40,30,20,10,85.

    print()
    h2.insert(95,3)
    h2.forwardprint() # This should print: 85,10,20,95,30,40.  
    h2.backwardprint() # This should print: 40,30,95,20,10,80.  

    print()
    h2.insert(75,6)
    h2.forwardprint() # This should print: 85,10,20,95,30,40,75. 
    h2.backwardprint() # This should print: 75,40,30,95,20,10,85. 


    print("///  Test 05  ///")
    a3 = [10, 20, 30, 40, 50, 60, 70]
    h3 = DoublyList(a3) # uses the constructor
    h3.forwardprint() # This should print: 10,20,30,40,50,60,70.  

    # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
    print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
    h3.forwardprint() # This should print: 20,30,40,50,60,70.  
    h3.backwardprint() # This should print: 70,60,50,40,30,20.  
    print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
    h3.forwardprint() # This should print: 20,30,40,60,70.  
    h3.backwardprint() # This should print: 70,60,40,30,20.  
    print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
    h3.forwardprint() # This should print: 20,30,40,60. 
    h3.backwardprint() # This should print: 60,40,30,20.

    ///  Test 01  ///
    10,20,30,40.
    40,30,20,10.
    4
    ///  Test 02  ///
    30
    ///  Test 03  ///
    3
    ///  Test 04  ///
    10,20,30,40.
    85,10,20,30,40.
    40,30,20,10,85.

    85,10,20,95,30,40.
    40,30,95,20,10,85.

    85,10,20,95,30,40,75.
    75,40,30,95,20,10,85.
    ///  Test 05  ///
    10,20,30,40,50,60,70.
    Removed element: 10
    20,30,40,50,60,70.
    70,60,50,40,30,20.
    Removed element: 50
    20,30,40,60,70.
    70,60,40,30,20.
    Removed element: 70
    20,30,40,60.
    60,40,30,20.
