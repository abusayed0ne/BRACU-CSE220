

    #Array_Stack
    class Stack:
      def __init__(self, arr=''):
        self.arr=[None]*len(arr)
        self.top=-1

      def push(self,elem):
        if self.top==-1 or self.top>-1:
          self.top+=1
          self.arr[self.top]=elem
        elif self.top==len(self.arr):
          print("stack overflow")

      def pop(self):
        elem = self.arr[self.top]
        self.arr[self.top]=0
        self.top-=1
        if self.top<-1:
          print("stack underflow")
          return
        return elem

      def peek(self):
        return self.arr[self.top]

      def paranth_balance(self, term):
        rem=[]
        self.__init__(term)
        self.xin=term
        x=-1
        for i in range(len(self.xin)):
          if self.xin[i] in '[{(':
            self.push(self.xin[i])
            rem+=[i]
            x+=1
          elif self.xin[i] in ')}]':
              if self.peek()=='(' and self.xin[i]==')':
                self.pop()
                x-=1
              elif self.peek()=='{' and self.xin[i]=='}':
                self.pop()
                x-=1
              elif self.peek()=='[' and self.xin[i]==']':
                self.pop()
                x-=1
              else:
                if self.peek()!=None and (self.peek() in '[{('):
                  print("This expression is NOT correct.")
                  print(f"Error at character # {rem[x]+1}. '{self.peek()}'- not closed.")
                  return
                elif (self.peek()==None):
                  print("This expression is NOT correct.")
                  print(f"Error at character # {i+1}. '{self.xin[i]}'- not opened.")
                  return
        print('The expression is correct')

    a1=Stack()
    a1.paranth_balance("1+2*(3/4)")
    a2=Stack()
    a2.paranth_balance("1+2*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14")
    a3=Stack()
    a3.paranth_balance("1+2*[3*3+{4–5(6(7/8/9)+10)}–11+(12*8)/{13+13}]+14")
    a4=Stack()
    a4.paranth_balance("1+2]*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14")
    a5=Stack()
    a5.paranth_balance(input())

    The expression is correct
    This expression is NOT correct.
    Error at character # 10. '{'- not closed.
    The expression is correct
    This expression is NOT correct.
    Error at character # 4. ']'- not opened.
    1+2*[3*3+{4–5(6(7/8/9)+10)}–11+(12*8)/{13+13}]+14
    The expression is correct

    #Linked_List_Stack

    class Node:
      def __init__(self, e, n):
        self.element = e
        self.next = n

    class LinkedList:
      
      def __init__(self, a):
        if type(a)==list:
          self.head = None
          tail=None 
          for i in range(0,len(a)):
            newNode=Node(a[i],None)
            if self.head==None:
              self.head=newNode
              tail=newNode
            else:
              tail.next=newNode
              tail=newNode


    class Stack:
      def __init__(self):
        self.top=Node(None,None)
        self.xin_2=LinkedList(self.top)

      def push(self,element):
        new=Node(element,self.top)
        self.top=new

      def pop(self):
        if self.top.element==None:
          print("stack underflow")
        else:
          self.top.element=None
          next=self.top.next
          self.top.next=None
          self.top=next


      def peek(self):
        return self.top.element


      def paranth_balance(self, term):
        rem=[]
        self.xin=term
        x=-1
        for i in range(len(self.xin)):
          if self.xin[i] in '[{(':
            self.push(self.xin[i])
            rem+=[i]
            x+=1
          elif self.xin[i] in ')}]':
              if self.peek()=='(' and self.xin[i]==')':
                self.pop()
                x-=1
              elif self.peek()=='{' and self.xin[i]=='}':
                self.pop()
                x-=1
              elif self.peek()=='[' and self.xin[i]==']':
                self.pop()
                x-=1
              else:
                if self.peek()!=None and (self.peek() in '[{('):
                  print("This expression is NOT correct.")
                  print(f"Error at character # {rem[x]+1}. '{self.peek()}'- not closed.")
                  return
                elif (self.peek()==None):
                  print("This expression is NOT correct.")
                  print(f"Error at character # {i+1}. '{self.xin[i]}'- not opened.")
                  return
        print('The expression is correct')


    a1=Stack()
    a1.paranth_balance("1+2*(3/4)")
    a2=Stack()
    a2.paranth_balance("1+2*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14")
    a3=Stack()
    a3.paranth_balance("1+2*[3*3+{4–5(6(7/8/9)+10)}–11+(12*8)/{13+13}]+14")
    a4=Stack()
    a4.paranth_balance("1+2]*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14")
    a5=Stack()
    a5.paranth_balance(input())

    The expression is correct
    This expression is NOT correct.
    Error at character # 10. '{'- not closed.
    The expression is correct
    This expression is NOT correct.
    Error at character # 4. ']'- not opened.
    1+2*[3*3+{4–5(6(7/8/9)+10)}–11+(12*8)/{13+13}]+14
    The expression is correct
